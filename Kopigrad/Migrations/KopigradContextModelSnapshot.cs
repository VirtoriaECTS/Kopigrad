// <auto-generated />
using System;
using Kopigrad.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Kopigrad.Migrations
{
    [DbContext(typeof(KopigradContext))]
    partial class KopigradContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_general_ci")
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");
            //MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Kopigrad.Models.Columnname", b =>
                {
                    b.Property<int>("IdColumnNames")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("idColumnNames");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdColumnNames"));

                    b.Property<int>("IdMiniService")
                        .HasColumnType("int(11)")
                        .HasColumnName("idMiniService");

                    b.Property<string>("NameColumn")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nameColumn");

                    b.HasKey("IdColumnNames")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdMiniService" }, "columnnames_ibfk_1");

                    b.ToTable("columnnames", (string)null);
                });

            modelBuilder.Entity("Kopigrad.Models.ContactType", b =>
                {
                    b.Property<int>("ContactTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ContactTypeId"));

                    b.Property<string>("ContactTypeName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("ContactTypeId")
                        .HasName("PRIMARY");

                    b.ToTable("ContactType", (string)null);
                });

            modelBuilder.Entity("Kopigrad.Models.Material", b =>
                {
                    b.Property<int>("IdMaterial")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdMaterial"));

                    b.Property<int>("Count")
                        .HasColumnType("int(11)");

                    b.Property<string>("NameMaterial")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("nameMaterial");

                    b.HasKey("IdMaterial")
                        .HasName("PRIMARY");

                    b.ToTable("material", (string)null);
                });

            modelBuilder.Entity("Kopigrad.Models.Miniservice", b =>
                {
                    b.Property<int>("IdMiniService")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("idMiniService");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdMiniService"));

                    b.Property<string>("BottomName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("IdService")
                        .HasColumnType("int(11)")
                        .HasColumnName("idService");

                    b.Property<string>("NameMiniServise")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("nameMiniServise");

                    b.Property<string>("TopName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdMiniService")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdService" }, "idService");

                    b.ToTable("miniservice", (string)null);
                });

            modelBuilder.Entity("Kopigrad.Models.Order", b =>
                {
                    b.Property<int>("IdOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdOrder"));

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("ContactTypeId")
                        .HasColumnType("int(11)");

                    b.Property<int>("Count")
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("DataOrder")
                        .HasColumnType("datetime");

                    b.Property<int>("IdStatus")
                        .HasColumnType("int(11)")
                        .HasColumnName("idStatus");

                    b.Property<int>("IdTableMiniService")
                        .HasColumnType("int(11)")
                        .HasColumnName("idTableMiniService");

                    b.Property<string>("NameUser")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("IdOrder")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ContactTypeId" }, "fk_contacttype");

                    b.HasIndex(new[] { "IdStatus" }, "idStatus");

                    b.HasIndex(new[] { "IdTableMiniService" }, "idx_idTableMiniService");

                    b.ToTable("order", (string)null);
                });

            modelBuilder.Entity("Kopigrad.Models.Orderitem", b =>
                {
                    b.Property<int>("IdOrderItems")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("idOrderItems");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdOrderItems"));

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("IdOrder")
                        .HasColumnType("int(11)");

                    b.HasKey("IdOrderItems")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdOrder" }, "IdRequst");

                    b.ToTable("orderitems", (string)null);
                });

            modelBuilder.Entity("Kopigrad.Models.Pagepdf", b =>
                {
                    b.Property<int>("IdPage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("idPage");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdPage"));

                    b.Property<int>("IdStory")
                        .HasColumnType("int(11)")
                        .HasColumnName("idStory");

                    b.Property<double>("Price")
                        .HasColumnType("double");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdPage")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdStory" }, "idStory");

                    b.ToTable("pagepdf", (string)null);
                });

            modelBuilder.Entity("Kopigrad.Models.Service", b =>
                {
                    b.Property<int>("IdService")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("idService");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdService"));

                    b.Property<string>("ConditionText")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("longblob")
                        .HasColumnName("image");

                    b.Property<string>("NameService")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("nameService");

                    b.Property<string>("Time")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("IdService")
                        .HasName("PRIMARY");

                    b.ToTable("service", (string)null);
                });

            modelBuilder.Entity("Kopigrad.Models.Status", b =>
                {
                    b.Property<int>("IdStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("idStatus");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdStatus"));

                    b.Property<string>("NameStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdStatus")
                        .HasName("PRIMARY");

                    b.ToTable("status", (string)null);
                });

            modelBuilder.Entity("Kopigrad.Models.Storypdf", b =>
                {
                    b.Property<int>("IdStory")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("idStory");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdStory"));

                    b.Property<double>("AllPrice")
                        .HasColumnType("double");

                    b.Property<string>("NameFile")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nameFile");

                    b.HasKey("IdStory")
                        .HasName("PRIMARY");

                    b.ToTable("storypdf", (string)null);
                });

            modelBuilder.Entity("Kopigrad.Models.Tableminiservice", b =>
                {
                    b.Property<int>("IdTableMiniService")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("idTableMiniService");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdTableMiniService"));

                    b.Property<int>("IdColumnName")
                        .HasColumnType("int(11)")
                        .HasColumnName("idColumnName");

                    b.Property<int>("IdMaterial")
                        .HasColumnType("int(100)")
                        .HasColumnName("idMaterial");

                    b.Property<int>("IdMiniService")
                        .HasColumnType("int(11)")
                        .HasColumnName("idMiniService");

                    b.Property<decimal>("Price")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)");

                    b.HasKey("IdTableMiniService")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdColumnName" }, "idColumnName");

                    b.HasIndex(new[] { "IdMaterial" }, "idMaterial");

                    b.HasIndex(new[] { "IdMiniService" }, "idMiniService");

                    b.ToTable("tableminiservice", (string)null);
                });

            modelBuilder.Entity("Kopigrad.Models.User", b =>
                {
                    b.Property<int>("IdUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("idUser");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdUser"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("HashPassworld")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("hashPassworld");

                    b.Property<string>("NameUser")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nameUser");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.HasKey("IdUser")
                        .HasName("PRIMARY");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Kopigrad.Models.Columnname", b =>
                {
                    b.HasOne("Kopigrad.Models.Miniservice", "IdMiniServiceNavigation")
                        .WithMany("Columnnames")
                        .HasForeignKey("IdMiniService")
                        .IsRequired()
                        .HasConstraintName("columnnames_ibfk_1");

                    b.Navigation("IdMiniServiceNavigation");
                });

            modelBuilder.Entity("Kopigrad.Models.Miniservice", b =>
                {
                    b.HasOne("Kopigrad.Models.Service", "IdServiceNavigation")
                        .WithMany("Miniservices")
                        .HasForeignKey("IdService")
                        .IsRequired()
                        .HasConstraintName("miniservice_ibfk_1");

                    b.Navigation("IdServiceNavigation");
                });

            modelBuilder.Entity("Kopigrad.Models.Order", b =>
                {
                    b.HasOne("Kopigrad.Models.ContactType", "ContactType")
                        .WithMany("Orders")
                        .HasForeignKey("ContactTypeId")
                        .IsRequired()
                        .HasConstraintName("fk_contacttype");

                    b.HasOne("Kopigrad.Models.Status", "IdStatusNavigation")
                        .WithMany("Orders")
                        .HasForeignKey("IdStatus")
                        .IsRequired()
                        .HasConstraintName("order_ibfk_1");

                    b.HasOne("Kopigrad.Models.Tableminiservice", "IdTableMiniServiceNavigation")
                        .WithMany("Orders")
                        .HasForeignKey("IdTableMiniService")
                        .IsRequired()
                        .HasConstraintName("fk_order_tableminiservice");

                    b.Navigation("ContactType");

                    b.Navigation("IdStatusNavigation");

                    b.Navigation("IdTableMiniServiceNavigation");
                });

            modelBuilder.Entity("Kopigrad.Models.Orderitem", b =>
                {
                    b.HasOne("Kopigrad.Models.Order", "IdOrderNavigation")
                        .WithMany("Orderitems")
                        .HasForeignKey("IdOrder")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_orderitems_order");

                    b.Navigation("IdOrderNavigation");
                });

            modelBuilder.Entity("Kopigrad.Models.Pagepdf", b =>
                {
                    b.HasOne("Kopigrad.Models.Storypdf", "IdStoryNavigation")
                        .WithMany("Pagepdfs")
                        .HasForeignKey("IdStory")
                        .IsRequired()
                        .HasConstraintName("pagepdf_ibfk_1");

                    b.Navigation("IdStoryNavigation");
                });

            modelBuilder.Entity("Kopigrad.Models.Tableminiservice", b =>
                {
                    b.HasOne("Kopigrad.Models.Columnname", "IdColumnNameNavigation")
                        .WithMany("Tableminiservices")
                        .HasForeignKey("IdColumnName")
                        .IsRequired()
                        .HasConstraintName("tableminiservice_ibfk_3");

                    b.HasOne("Kopigrad.Models.Material", "IdMaterialNavigation")
                        .WithMany("Tableminiservices")
                        .HasForeignKey("IdMaterial")
                        .IsRequired()
                        .HasConstraintName("tableminiservice_ibfk_2");

                    b.HasOne("Kopigrad.Models.Miniservice", "IdMiniServiceNavigation")
                        .WithMany("Tableminiservices")
                        .HasForeignKey("IdMiniService")
                        .IsRequired()
                        .HasConstraintName("tableminiservice_ibfk_1");

                    b.Navigation("IdColumnNameNavigation");

                    b.Navigation("IdMaterialNavigation");

                    b.Navigation("IdMiniServiceNavigation");
                });

            modelBuilder.Entity("Kopigrad.Models.Columnname", b =>
                {
                    b.Navigation("Tableminiservices");
                });

            modelBuilder.Entity("Kopigrad.Models.ContactType", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Kopigrad.Models.Material", b =>
                {
                    b.Navigation("Tableminiservices");
                });

            modelBuilder.Entity("Kopigrad.Models.Miniservice", b =>
                {
                    b.Navigation("Columnnames");

                    b.Navigation("Tableminiservices");
                });

            modelBuilder.Entity("Kopigrad.Models.Order", b =>
                {
                    b.Navigation("Orderitems");
                });

            modelBuilder.Entity("Kopigrad.Models.Service", b =>
                {
                    b.Navigation("Miniservices");
                });

            modelBuilder.Entity("Kopigrad.Models.Status", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Kopigrad.Models.Storypdf", b =>
                {
                    b.Navigation("Pagepdfs");
                });

            modelBuilder.Entity("Kopigrad.Models.Tableminiservice", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
