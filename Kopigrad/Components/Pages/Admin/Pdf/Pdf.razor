@page "/Pdf"
@using PdfSharpCore.Pdf.IO
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider
@inject IWebHostEnvironment env

<head>
    <link rel="stylesheet" href="/users.css">
    <link rel="stylesheet" href="/admin.css">
</head>

<div class="Banner">
    <h5 class="TextBanner">PDF расчёт</h5>
</div>

<div class="pdf-layout">
    <div class="left-panel">
        <InputFile OnChange="HandleFileSelected" accept=".pdf" />

        @if (!string.IsNullOrEmpty(pdfFilePath))
        {
            <h4 class="TextCalculator">Просмотр PDF:</h4>
            <object data="@pdfFilePath" type="application/pdf" width="100%" height="600px">
                <p>Ваш браузер не поддерживает PDF. <a href="@pdfFilePath">Скачать PDF</a>.</p>
            </object>
        }
    </div>

    @if (!string.IsNullOrEmpty(pdfFilePath))
    {
        <div class="right-panel">
            <select class="print-type" @onchange="OnColorChange">
                <option value="1" selected>Цветная печать</option>
                <option value="2" >Черно - белая печать</option>
            </select>

            <table class="summary-table">
                <thead>
                    <tr>
                        <th>Номер страницы</th>
                        <th>Размер</th>
                        <th>Стоимость</th>
                    </tr>
                </thead>
                <tbody>
                    @for (int i = 0; i < pageFormats.Count; i++)
                    {
                        <tr>
                            <td>@(i + 1) страница</td>
                            <td>@pageFormats[i]</td>
                            <td>@Prices[i] рублей</td>
                        </tr>
                    }
                </tbody>
            </table>
            <h5 class="TextCalculator">Итог: @Prices.Sum() рублей</h5>
            <p class="history-link">История</p>
        </div>
    }
</div>

<style>
    .pdf-layout {
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
        gap: 2vw;
        justify-content: space-around;
        margin: 2vw;
    }

    .left-panel {
        flex: 1;
        min-width: 300px;
        max-width: 45vw;
    }

    .right-panel {
        flex: 1;
        min-width: 300px;
        max-width: 45vw;
        border: 1px solid black;
        padding: 1rem;
        border-radius: 5px;
    }

    .print-type {
        width: 100%;
        margin-bottom: 1rem;
        padding: 0.5rem;
        font-size: 1rem;
    }

    .summary-table {
        width: 100%;
        border-collapse: collapse;
    }

        .summary-table th, .summary-table td {
            border: 1px solid black;
            padding: 0.5rem;
            text-align: center;
        }

    .history-link {
        margin-top: 1rem;
        text-decoration: underline;
        color: #333;
        cursor: pointer;
    }
</style>

@code {
    private string? pdfFilePath;
    public List<string> pageFormats = new();
    public List<Classes.Data.DataSize> dataSizes = new();

    int[] idMiniServices;
    int[] idColums;
    int[] idMaterial;
    decimal[] Prices;


    List<Models.Miniservice> miniservices = new();
    List<Models.Material> materials = new();
    List<Models.Columnname> colums = new();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        if (!authState.User.Identity?.IsAuthenticated ?? true)
        {
            Navigation.NavigateTo("/Admin");
            return;
        }
        var manager = new Classes.Admin.Servise.ManagmentMiniService();
        miniservices = manager.getMiniServiceToPdf();
        colums = manager.getAllColums();
        materials = manager.getAllMaterial();
    }

    void OnMiniServiceChanged(ChangeEventArgs e, int index)
    {
        if (int.TryParse(e.Value?.ToString(), out int selectedId))
        {
            idMiniServices[index] = selectedId;
            if (idMaterial[index] != 0) getPrice(index);
        }
    }

    void OnColumsChanged(ChangeEventArgs e, int index)
    {
        if (int.TryParse(e.Value?.ToString(), out int selectedId))
            idColums[index] = selectedId;
    }

    void OnMaterialChanged(ChangeEventArgs e, int index)
    {
        if (int.TryParse(e.Value?.ToString(), out int selectedId))
        {
            idMaterial[index] = selectedId;
            if (idColums[index] != 0) getPrice(index);
        }
    }

    void OnColorChange(ChangeEventArgs e)
    {
        var convert = new Classes.Admin.Servise.ConvertPdfonPrice();
        if (int.TryParse(e.Value?.ToString(), out int selectedId))
        {
            if(selectedId == 1)
            {
                Prices = convert.getPriceNormalDiplom(80, dataSizes);
            }
            else
            {
                Prices = convert.getPriceNormalDiplom(100, dataSizes);
            }
        }

        StateHasChanged();
    }

    void getPrice(int index)
    {
        var convert = new Classes.Admin.Servise.ConvertPdfonPrice();
        double w = dataSizes[index].weight, h = dataSizes[index].heuiht;
        Prices[index] = convert.getPriceNormal(idMiniServices[index], idColums[index], idMaterial[index], pageFormats[index], w, h);
    }

    async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        var uploadsPath = Path.Combine(env.WebRootPath, "uploads");
        Directory.CreateDirectory(uploadsPath);

        var fileName = Path.GetFileName(file.Name);
        var fullPath = Path.Combine(uploadsPath, fileName);
        using (var fs = new FileStream(fullPath, FileMode.Create))
            await file.OpenReadStream(long.MaxValue).CopyToAsync(fs);

        pdfFilePath = $"uploads/{fileName}";
        await Task.Delay(500);

        bool ready = false;
        while (!ready)
        {
            try
            {
                using var document = PdfReader.Open(fullPath, PdfDocumentOpenMode.ReadOnly);
                foreach (var page in document.Pages)
                {
                    var format = new Classes.Admin.Servise.ConvertPdfonPrice().GetPaperFormat(page.Width, page.Height);
                    pageFormats.Add(format);
                    dataSizes.Add(new Classes.Data.DataSize(page.Width, page.Height));
                }
                ready = true;
            }
            catch (IOException ex) { Console.WriteLine($"PDF загрузка: {ex.Message}"); }
        }

        int count = pageFormats.Count;
        idMiniServices = new int[count];
        idColums = new int[count];
        idMaterial = new int[count];
        Prices = new decimal[count];
        var convert = new Classes.Admin.Servise.ConvertPdfonPrice();
        Prices = convert.getPriceNormalDiplom(80, dataSizes);
    }
}
