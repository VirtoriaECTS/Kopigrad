@page "/Servise"
@layout Layout.Menu.MenuAdmin
@using System.Security.Claims
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authentication.Cookies
@using Microsoft.AspNetCore.Http
@using Kopigrad.Models;
@attribute [Authorize]

@inject AuthenticationStateProvider AuthStateProvider
@inject IHttpContextAccessor HttpContextAccessor
@inject NavigationManager Navigation
@rendermode InteractiveServer
<PageTitle>Услуги</PageTitle>

<head>
    <link rel="stylesheet" href="/users.css" />
    <link rel="stylesheet" href="/admin.css" />
</head>

<div class="Banner">
    <h5 class="TextBanner">Услуги</h5>
</div>

<div class="CenterDiv">
    <div class="DivService">
        @foreach (var text in services)
        {
            <div @onclick="() => ClickInfoService(text.IdService)" class="divOneServise">
                <button @onclick="() => ClickServiceChangeOne(text.IdService)"
                        hidden="@buttonChange"
                        class="ButtonChangeServise">
                    <img class="ImageButtonChange" src="Image/changeIcon.png" />
                </button>

                <button @onclick="() => ClickServiceDeleteOne(text.IdService)"
                        hidden="@buttonDelete"
                        class="ButtonDeleteServise">
                    <img class="ImageButtonChange" src="Image/deleteIcon.png" />
                </button>

                <img class="ImageStyleServiseAll" src="@GetImageSrc(text.Image)" alt="Изображение" />

                <h1 class="TextServise">
                    @text.NameService
                </h1>
            </div>
        }
    </div>
</div>

<div class="TextContainerMenuAdmin">
    <button class="ButtonDesingAdd" @onclick="AddProductClick">
        Добавить
    </button>

    <button @onclick="ClickChangeAll" class="ButtonDesingChange">
        Изменить
    </button>

    <button @onclick="ClickDeleteAll" class="ButtonDesingDelete">
        Удалить
    </button>
</div>

@code {
    private bool buttonChange = true;
    private bool buttonDelete = true;
    private List<Models.Service> services = new();

    protected override async Task OnInitializedAsync()
    {
        // Дополнительная проверка на случай, если Router не сработал
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity?.IsAuthenticated != true)
        {
            Navigation.NavigateTo("/Admin");
            return;
        }

        using (var context = new KopigradContext())
        {
            services = context.Services.ToList();
        }
    }

    private string? GetImageSrc(byte[] Image) =>
        Classes.All.ConvertImage.GetImageSrc(Image);

    private void AddProductClick() =>
        Navigation.NavigateTo("/ServiseAddProduct");

    public void ClickChangeAll() =>
        buttonChange = !buttonChange;

    public void ClickDeleteAll() =>
        buttonDelete = !buttonDelete;

    public void ClickServiceChangeOne(int id) =>
        Navigation.NavigateTo($"/ChangeServise/{id}");

    public void ClickServiceDeleteOne(int id)
    {
        var manager = new Classes.Admin.Servise.ManagmentServiseClasses();
        manager.Delete(id);

        services.Clear();
        using (var context = new KopigradContext())
        {
            services = context.Services.ToList();
        }

        buttonDelete = true;
        StateHasChanged();
    }

    public void ClickInfoService(int id)
    {
        if (buttonChange && buttonDelete)
            Navigation.NavigateTo($"/AddInfoService/{id}");
    }
}
