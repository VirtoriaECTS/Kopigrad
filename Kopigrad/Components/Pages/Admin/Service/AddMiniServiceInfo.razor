@page "/AddMiniServiceInfo/{id:int}"

@inject NavigationManager Navigation

@rendermode InteractiveServer

<div class="Banner">
    <h5 class="TextBanner">Редактирование содержания @nameBanner</h5>
</div>
<div class="CenterVertical">

    <h1 class="TextNameMiniService">Название</h1>
    <input @bind="nameMiniService" class="InputNameMiniService" />


    <table class="TableBorder">

        @for (int i = 0; i < trSum; i++)
        {

            <tr class="TableBorderTr">


                @for (int j = 0; j < tdSum; j++)
                {

                    if (i == 0 && j == 0)
                    {
                        @* Левая шапка с двумя данными  *@
                        <td class="TableBorderTd">
                            <input @bind="topCategory" class="InputTable"  />
                            <br />
                            <input @bind="bottomCategory" class="InputTable"  />
                        </td>
                    }
                    else if (i == 0 && j > 0)
                    {
                        @* Шапка таблицы *@
                        <td class="TableBorderTd">

                            <input value="@GetValue(j-1)" @oninput="e => UpdateValue(j-1, e.Value)"
                                   class="InputTable" placeholder="@(j-1)" />


                        </td>
                    }
                    else if (i > 0 && j == 0)
                    {
                        @* Выбор материала *@
                        <td class="TableBorderTd">
                            <select @onchange="e => GetMaterial(e, i)">
                                @foreach (var material in viewmaterials)
                                {
                                    <option value="@material.IdMaterial">@material.NameMaterial</option>
                                }
                                }
                            </select>
                        </td>
                    }
                    else if (i > 0 && j > 0)
                    {
                        @*Цена*@
                        <td class="TableBorderTd">
                            <input type="number" class="InputTable" placeholder="Цена" />
                        </td>
                    }
                }

                @if (i == 0)
                {
                    <td rowspan="@(trSum)" class="TableBorderTd">
                        <button @onclick="PlusTd" class="ButtonPlus"></button>
                        <br />
                        <button @onclick="MinusTd" class="ButtonMinus"></button>
                    </td>
                }

            </tr>


        }
    </table>
    <table class="TableBorderPlusMinusTr">

        <tr>

            <td>

                <div class="divButtonTr">
                    <button @onclick="PlusTr" class="ButtonPlus">
                    </button>

                    <button @onclick="MinusTr" class="ButtonMinus">
                    </button>
                </div>

            </td>


        </tr>
    </table>

   


    <div class="TextContainerMenuAdmin">
        <button @onclick="ClickChange" class="ButtonDesingSavePicture">Cохранить изменения</button>

        <button @onclick="ClickExit" class="ButtonDesingNoSavePicture">Выход без сохранения</button>

    </div>




</div>



<h4>@text</h4>
<h4>  @mat</h4>
<button @onclick="cheak">ФФФФФФФФФФФ</button>


@code {

    [Parameter]
    public int? id { get; set; }

    string nameBanner = "";

    string nameMiniService = "";

    int trSum = 3;
    int tdSum = 2;

    int countInfo = 0;

    string topCategory = "";
    string bottomCategory = "";


    string text = "";
    string mat = "";

    //Создание листов для сохранения

    Dictionary<int, string> header = new Dictionary<int, string>();
    Dictionary<int, int> valueMaterial = new Dictionary<int, int>();
    List<List<int>> priceList = new List<List<int>>();


    public  void cheak()
    {
        text = "";
        mat = "";
        foreach(var txt in header)
        {
            text += txt.Value + " ";
        }

        foreach(int m in valueMaterial.Values)
        {
            mat += m + " ";
        }


    }


    List<Models.Material> viewmaterials = new List<Models.Material>();

    protected override void OnInitialized()
    {
        Classes.Admin.Servise.ManagmentServiseClasses managmentServise = new Classes.Admin.Servise.ManagmentServiseClasses();
        Classes.Admin.Servise.ManagerMaterial managerMaterial = new Classes.Admin.Servise.ManagerMaterial();

        nameBanner = managmentServise.GetName(Convert.ToInt32(id));
        viewmaterials = managerMaterial.GetList();

        // Инициализируем header под количество колонок

    }


    public void GetMaterial(ChangeEventArgs e, int index)
    {
        valueMaterial[index] = Convert.ToInt32(e.Value);

    }

    // Получить значение из словаря
    private string GetValue(int index)
    {
        return header.ContainsKey(index) ? header[index] : string.Empty;
    }

    // Обновить значение в словаре
    private void UpdateValue(int index, object value)
    {
        header[index] = Convert.ToString(value);
    }

    private void ClickChange()
    {


        Navigation.NavigateTo($"/AddInfoService/{id}");
    }


    public void PlusTr()
    {
        trSum++;

        StateHasChanged();
    }

    public void MinusTr()
    {
        if (trSum - 1 > 1)
        {
            valueMaterial.Remove(trSum);
            trSum--;
            StateHasChanged();

        }
    }



    public void PlusTd()
    {
        if (tdSum < 9)
        {
            tdSum++;

            StateHasChanged();
        }
    }

    public void MinusTd()
    {
        if (tdSum > 2) // Минимальное количество колонок = 2
        {
            header.Remove(tdSum);
            tdSum--;

            StateHasChanged();
        }
    }







    public void ClickExit()
    {
        Navigation.NavigateTo($"/AddInfoService/{id}");
    }
}