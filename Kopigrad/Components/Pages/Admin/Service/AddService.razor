@page "/ServiseAddProduct"
@layout Layout.Menu.MenuAdmin;
@rendermode InteractiveServer
@inject NavigationManager Navigation


@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authentication.Cookies
@using Microsoft.AspNetCore.Http

@attribute [Authorize]

@inject AuthenticationStateProvider AuthStateProvider
<head>
    <link rel="stylesheet" href="/users.css">
    <link rel="stylesheet" href="/admin.css">
</head>

<div class="Banner">
    <h5 class="TextBanner">Добавление услуги</h5>
</div>

<div class="CenterVertical">
    <div class="ContainerImage">
        @if (imageData != null)
        {
            <img class="ImageStyle" src="@GetImage()" alt="Изображение" />

        }
        <h1 class="TextAdd">@nameServise</h1>
    </div>

    <label class="ButtonDesingAddPicture">
        Выбрать изображение
        <InputFile OnChange="HandleFileSelected" accept=".png" style="display: none;" />
    </label>



    <h5 class="TextNameService">Название услуги:</h5>
    <input @bind="nameServise"  class="InputAdmin" />

    <div class="TextContainerMenuAdmin">
        <button @onclick="ClickAdd" class="ButtonDesingSavePicture">Cохранить</button>

        <button @onclick="ClickExit" class="ButtonDesingNoSavePicture">Выход без сохранения</button>

    </div>

    <h1 class="TextError">@error</h1>
</div>



@code {
    private byte[]? imageData;

    private string nameServise;

    private string error;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity?.IsAuthenticated != true)
        {
            Navigation.NavigateTo("/Admin");
            return;
        }

        
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;

        // Проверка размера файла (до 100 МБ)
        if (file.Size > 100 * 1024 * 1024)
        {

            imageData = null;
            return;
        }

        // Проверка на тип изображения
        if (file.ContentType != "image/png")
        {
            imageData = null;
            return;
        }

        // Чтение файла в byte[]
        imageData = new byte[file.Size];
        await file.OpenReadStream().ReadAsync(imageData);

    }

    private string? GetImage()
    {


        return Classes.All.ConvertImage.GetImageSrc(imageData);
    }


    private void ClickAdd()
    {
        Classes.Admin.Servise.ManagmentServiseClasses addServise = new Classes.Admin.Servise.ManagmentServiseClasses();

        error =  addServise.Add(imageData, nameServise);

        if(error == "")
        {
            Navigation.NavigateTo("/Servise");
        }
    }

    public void ClickExit()
    {
        Navigation.NavigateTo("/Servise");
    }
}
