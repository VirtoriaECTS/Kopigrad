@page "/Requst"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authentication.Cookies
@using Microsoft.AspNetCore.Http
@inject NavigationManager Navigation
@attribute [Authorize]
@inject AuthenticationStateProvider AuthStateProvider

<head>
    <link rel="stylesheet" href="/users.css">
    <link rel="stylesheet" href="/admin.css">
    <link rel="stylesheet" href="/orders.css">
</head>

<div class="Banner">
    <h5 class="TextBanner">Заказы</h5>
</div>
    <div class="page-container">

        <!-- Панель управления -->
        <div class="toolbar">

        <select class="control" @onchange="HandleFiltrChange">
            <option value="0">Без фильтрации</option>
            <option value="1">Указан телеграмм</option>
            <option value="2">Указанна почта</option>
            </select>
        <select class="control" @onchange="HandleSortChange">
            <option value="0">Без сортировки</option>
            <option value="1">Сначала новые заказы</option>
            <option value="2">Сначала старые заказы</option>
            <option value="3">Сначала выполненные заказы</option>
            <option value="4">Сначала невыполненые заказы</option>
            <option value="5">Сначала дорогие заказы</option>
            <option value="6">Сначала недорогие заказы</option>
        </select>

        </div>


    @for(int i = 0; i < orders.Count; i ++)
    {
        var index = i;

        <div class="order-card" style="margin: 2vh">
            <div class="order-summary" @onclick="() => ToggleDetails(index)">
                <span><strong>@orders[index].NameUser</strong></span>
                <span><strong>@contactTypes.Where(x => x.ContactTypeId == orders[index].ContactTypeId).Select(x => x.ContactTypeName).First():</strong> @orders[index].Contact</span>
                <span><strong>@orders[index].DataOrder</strong></span>
                @{
                    var status = statuses.FirstOrDefault(s => s.IdStatus == orders[index].IdStatus);
                }
                <span class="status">
                    <span class="dot" style="display:inline-block; width:12px; height:12px; border-radius:50%; margin-right:6px; background-color:@GetStatusColor(Convert.ToString(status?.IdStatus))"></span>
                    @status?.NameStatus
                </span>

                <span class="expand-icon">@(!isExpanded[index] ? "⬇" : "⬆")</span>
            </div>

            @if (isExpanded[index])
            {
               
                <div class="order-details">
                    <div class="details-row">
                        <div class="col-1">
                            <div style="white-space: nowrap;">
                                @dataOrdersItems[index].nameService
                            </div>
                            <div style="white-space: nowrap;">
                                @dataOrdersItems[index].miniService
                            </div>
                            <div style="white-space: nowrap;">
                                @dataOrdersItems[index].nameColumn
                            </div>
                            <div style="white-space: nowrap;">
                                @dataOrdersItems[index].nameMaterial
                            </div>

                        </div>
                        <div class="col-2">
                            @foreach (var item in dataOrdersItems[index].dataList)
                            {
                                <div style="white-space: nowrap;">
                                    @item
                                </div>
                            }
                        </div>

                        <div class="col-3">
                            @foreach (var item in dataOrdersItems[index].dataList)
                            {
                                <div>
                                    <a href="@item" target="_blank" rel="noopener noreferrer">просмотр</a>
                                    <a href="@item" download>скачать</a>
                                </div>
                            }
                        </div>


                        <div class="col-4">
                            <div><strong>Стоимость:</strong> @orders[index].Price рублей</div>
                            <div>
                                @if (orders[index].ContactTypeId == 2)
                                {

                                    <a href="https://t.me/@(@orders[index].Contact.TrimStart('@'))" target="_blank" rel="noopener noreferrer">
                                        Связаться с клиентом
                                    </a>
                                }
                                else if (orders[index].ContactTypeId == 3)
                                {
                                    <a href="mailto:@orders[index].Contact" target="_blank" rel="noopener noreferrer">
                                        Связаться с клиентом
                                    </a>
                                }


                            </div>
                            <select class="change-status-btn" @onchange="e => ChangeStatus(index, int.Parse(e.Value.ToString()))">
                                <option disabled value="">Изменить статус</option>
                                @foreach (var init in statuses)
                                {
                                    <option value="@init.IdStatus" selected="@(init.IdStatus == orders[index].IdStatus)">
                                        @init.NameStatus
                                    </option>
                                }
                            </select>


                        </div>
                    </div>
                </div>
            }
        </div>
    }


</div>


@if (isModalVisible)
{
    <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5); position: fixed; top: 0; left: 0; width: 100%; height: 100%;">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Ошибка</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <p>@error</p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CloseModal">Закрыть</button>
                </div>
            </div>
        </div>
    </div>
}



@code {

    private int currentSortOption = 0;
    private int currentFilterOption = 0;
    List<Models.Order> allOrders = new List<Models.Order>();
    private void ApplyFilterAndSort()
    {
        IEnumerable<Models.Order> filtered = allOrders;

        // Применяем фильтрацию
        if (currentFilterOption != 0)
        {
            switch (currentFilterOption)
            {
                case 1: // Только Telegram
                    filtered = filtered.Where(x => x.ContactTypeId == 2);
                    break;
                case 2: // Только Email
                    filtered = filtered.Where(x => x.ContactTypeId == 3);
                    break;
            }
        }

        // Применяем сортировку
        if (currentSortOption != 0)
        {
            switch (currentSortOption)
            {
                case 1: // Новые
                    filtered = filtered.OrderByDescending(o => o.DataOrder);
                    break;
                case 2: // Старые
                    filtered = filtered.OrderBy(o => o.DataOrder);
                    break;
                case 3: // Выполненные
                    filtered = filtered.OrderByDescending(o => o.IdStatus == 1);
                    break;
                case 4: // Невыполненные
                    filtered = filtered.OrderByDescending(o => o.IdStatus == 3);
                    break;
                case 5: // Дорогие
                    filtered = filtered.OrderByDescending(o => o.Price);
                    break;
                case 6: // Недорогие
                    filtered = filtered.OrderBy(o => o.Price);
                    break;
            }
        }

        orders = filtered.ToList();
        isExpanded = new List<bool>(new bool[orders.Count]);
    }



    private void HandleSortChange(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int value))
        {
            currentSortOption = value;
            ApplyFilterAndSort();
        }
    }



    private void HandleFiltrChange(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int value))
        {
            currentFilterOption = value;
            ApplyFilterAndSort();
        }
    }

    private void CloseModal()
    {
        isModalVisible = false;
        error = ""; // можно очистить текст ошибки
    }


    bool isModalVisible = false;


    Classes.Admin.Servise.ManagerOrders managerOrders = new Classes.Admin.Servise.ManagerOrders();


    List<bool> isExpanded = new List<bool>();
    List<Models.Status> statuses = new List<Models.Status>();
    List<Models.Order> orders = new List<Models.Order>();
    List<Models.Contacttype> contactTypes = new List<Models.Contacttype>();
    List<Classes.Data.DataOrdersClass> dataOrdersItems = new List<Classes.Data.DataOrdersClass>();
    string error = "";


    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity?.IsAuthenticated != true)
        {
            Navigation.NavigateTo("/Admin");
            return;
        }
        Classes.Admin.Servise.Order.OrderManager orderManager = new Classes.Admin.Servise.Order.OrderManager();
        statuses = orderManager.getStatus();
        allOrders = orderManager.GetOrders(); // ← сохраняем полный список
        orders = allOrders.ToList();          // ← отображаем копию
        contactTypes = orderManager.GetStatusType();


        dataOrdersItems = orderManager.getOrderItems();

        foreach(var item in orders)
        {
            isExpanded.Add(false);
        }
    }

    private void ToggleDetails(int index)
    {
        isExpanded[index] = !isExpanded[index];
        StateHasChanged();
    }

    private void ChangeStatus(int index, int newStatus)
    {
        // Обновляем статус в базе
        int idOrder = orders[index].IdOrder;
        error = managerOrders.ChangeStatusOrder(idOrder, newStatus);

        if(error == "")
        {
            // Меняем статус в заказе
            orders[index].IdStatus = newStatus;
        
        }
        else
        {
            isModalVisible = true; // Показываем модальное окно
        }

        StateHasChanged(); // Обновляем UI
    }


    private string GetStatusColor(string status)
    {
        return status switch
        {
            "1" => "green",
            "2" => "#E8C200",  // вот тут заменил на нужный желтый
            "3" => "red",
            "4" => "gray",
            _ => "transparent"
        };
    }
}

