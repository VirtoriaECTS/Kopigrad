@page "/businesscard"
@layout Layout.Menu.MenuUser;
@rendermode InteractiveServer

@using System.Net.Http.Json
@inject HttpClient Http

<head>
    <link rel="stylesheet" href="/users.css">
    <link rel="stylesheet" href="/admin.css">
</head>

<div class="Banner">
    <h5 class="TextBanner">Генератор визиток</h5>
</div>


<div class="divUsersColumn">
    <table style="margin: 5vw 5vw 5vw 5vw;">
        <tr>
            <td>
                <label class="TextCalculator" style="text-align: center;     font-size: 2.5vh;">Информация:</label>
            </td>

        </tr>
        <tr>
            <td>
                <label class="TextCalculator" style=" text-align: left;">Имя:</label>
            </td>

            <td>
                <input class="inputUser" @bind="Name" />
            </td>



        </tr>

        <tr>
            <td>
                <label class="TextCalculator" style=" text-align: left;">Должность:</label>
            </td>

            <td>
                <input class="inputUser" @bind="JobTitle" />
            </td>
        </tr>

        <tr>
            <td>
                <label class="TextCalculator" style=" text-align: left;">Компания:</label>
            </td>

            <td>
                <input class="inputUser" @bind="Company" />
            </td>
        </tr>

        <tr>
            <td>
                <label class="TextCalculator" style=" text-align: left;">Контакт:</label>
            </td>

            <td>
                <input class="inputUser" @bind="Contact" />
            </td>
        </tr>

        <tr>
            <td>
                <label class="TextCalculator" style=" text-align: left;">Стиль визитки:</label>
            </td>

            <td>
                <select class="inputUser" @bind="SelectedStyle">
                    @foreach (var style in Styles)
                    {
                        <option value="@style">@style</option>
                    }
                </select>
            </td>
        </tr>

        <tr>

            <button class="ButtonUsers" style=" text-align: center;" @onclick="GenerateImageAsync" disabled="@IsLoading">
                @(IsLoading ? "Генерация..." : "Сгенерировать визитку")
            </button>
        </tr>



    </table>

    @if (!string.IsNullOrEmpty(ImageUrl))
    {
        <div class="mt-3" style="margin: 5vw 5vw 5vw 5vw;">
            <img src="@ImageUrl" alt="Business Card" style="width: 30vw; border: 1px solid #ccc; text-align: center; margin: 10vw 5vw 5vw 5vw;" />

            <div class="mt-2">
                <a class="ButtonUsersDombload" style="text-align: center; margin: 0vw 5vw 0vw 5vw;" href="@ImageUrl" download="@($"{Name}_card.png")" target="_blank">
                    Скачать визитку
                </a>
            </div>
        </div>
    }

</div>







@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger mt-2">@ErrorMessage</div>
}

@code {
    private string Name;
    private string JobTitle;
    private string Company;
    private string Contact;
    private string ImageUrl;
    private string ErrorMessage;
    private string SelectedStyle = "Минимализм";
    private bool IsLoading;

    private readonly string[] Styles = new[]
    {
        "Минимализм", "Современный", "Технологичный", "Ретро", "Классический", "Черно-белый", "Цветной",  "Аниме", "Китайский"
    };

    private const string ApiKey = "1b64c4d6-9e17-403d-aee0-0b1a3766ba69";

    private async Task GenerateImageAsync()
    {
        ErrorMessage = string.Empty;
        ImageUrl = string.Empty;
        IsLoading = true;

        var prompt = $"визитка в стиле {SelectedStyle.ToLower()}, с именем {Name}, должностью {JobTitle}, компанией {Company}, и контактами {Contact}";

        var payload = new
        {
            token = ApiKey,
            prompt = prompt,
            width = 1024,
            height = 512,
            response_type = "url",
            stream = false
        };

        try
        {
            var response = await Http.PostAsJsonAsync("https://neuroimg.art/api/v1/free-generate", payload);
            var result = await response.Content.ReadFromJsonAsync<ApiResponse>();

            if (result?.status == "SUCCESS" && !string.IsNullOrEmpty(result.image_url))
            {
                ImageUrl = result.image_url;
            }
            else
            {
                ErrorMessage = "Ошибка генерации изображения.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = "Ошибка: " + ex.Message;
        }

        IsLoading = false;
    }

    private class ApiResponse
    {
        public string status { get; set; }
        public string image_url { get; set; }
    }
}