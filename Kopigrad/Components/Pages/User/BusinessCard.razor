@page "/businesscard"
@layout Layout.Menu.MenuUser;
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@using Kopigrad.Components.Classes.Admin
@rendermode InteractiveServer
@inject HttpClient Http
@inject IJSRuntime JS
@inject NavigationManager Nav

<head>
    <link rel="stylesheet" href="/users.css">
    <link rel="stylesheet" href="/admin.css">
    <link rel="stylesheet" href="/cardsvisit.css">
</head>
<div class="Banner">

    <h5 class="TextBanner">Конструктор визиток</h5>


</div>



<select class="form-control" @onchange="HandleChange" style="width:80vw; margin: 3vw;">
    <option value="1">Создать визитку</option>
    <option value="2">Использовать шаблон</option>
</select>



    <div class="layout">
        <!-- Сайдбар -->
        <div class="sidebar">
            <!-- Текст -->
            <div class="panel">
                <h3>Текст</h3>
                <InputText @bind-Value="NewText" class="form-control" placeholder="Введите текст" />
                <button class="btn" @onclick="AddText">Добавить текст</button>

                @if (SelectedElement is TextElement te)
                {
                    <label @onclick="() => SelectElement(te)" style="cursor:pointer">
                        Цвет: <input type="color" @bind="te.Color" class="form-control" />
                    </label>
                    <label @onclick="() => SelectElement(te)" style="cursor:pointer">
                        Размер: <InputNumber @bind-Value="te.FontSize" class="form-control" />
                    </label>
                    <label @onclick="() => SelectElement(te)" style="cursor:pointer">
                        Шрифт:
                        <select @bind="te.FontFamily" class="form-control">
                            <option value="Arial">Arial</option>
                            <option value="Helvetica">Helvetica</option>
                            <option value="Tahoma">Tahoma</option>
                            <option value="Verdana">Verdana</option>
                            <option value="Trebuchet MS">Trebuchet MS</option>
                            <option value="Georgia">Georgia</option>
                            <option value="Times New Roman">Times New Roman</option>
                            <option value="Palatino Linotype">Palatino Linotype</option>
                            <option value="Courier New">Courier New</option>
                            <option value="Lucida Console">Lucida Console</option>
                            <option value="Impact">Impact</option>
                            <option value="Comic Sans MS">Comic Sans MS</option>
                            <option value="Segoe UI">Segoe UI</option>
                            <option value="Roboto">Roboto</option>
                            <option value="Open Sans">Open Sans</option>
                        </select>
                    </label>

                    <button class="btn" @onclick="() => RemoveElement(te)">Удалить текст</button>
                }
            </div>

            <!-- Изображение -->
            <div class="panel">
                <h3>Изображение</h3>
                <select @bind="SelectedImageType" class="form-control">
                    <option value="upload">Свой файл</option>
                    <option value="gen">Сгенерировать</option>
                </select>

                @if (SelectedImageType == "upload")
                {
                    <InputFile OnChange="UploadImage" class="form-control" />
                }
                else
                {
                    <InputText @bind-Value="ImagePrompt" class="form-control" placeholder="Промпт для генерации" />
                    <button class="btn" @onclick="GenerateElementImage" disabled="@IsImageLoading">
                        @(IsImageLoading ? "Генерируется…" : "Сгенерировать")
                    </button>
                    @if (!string.IsNullOrEmpty(ImageError))
                    {
                        <div class="error">@ImageError</div>
                    }
                }

                @if (SelectedElement is ImageElement ie)
                {
                    <div class="resize-controls">
                        <label>
                            Ширина (px):
                            <InputNumber @bind-Value="ie.Width" class="form-control" />
                            <input type="range" min="10" max="1000" @bind="ie.Width" />
                        </label>
                        <label>
                            Высота (px):
                            <InputNumber @bind-Value="ie.Height" class="form-control" />
                            <input type="range" min="10" max="800" @bind="ie.Height" />
                        </label>
                    </div>
                    <button class="btn" @onclick="() => RemoveElement(ie)">Удалить изображение</button>
                }
            </div>

            <!-- Фон -->
            <div class="panel">
                <h3>Фон</h3>
                <InputFile OnChange="UploadBackground" class="form-control" />
                <InputText @bind-Value="BackgroundPrompt" class="form-control" placeholder="Промпт для генерации фона" />
                <button class="btn" @onclick="GenerateBackground" disabled="@IsBgLoading">
                    @(IsBgLoading ? "Генерируется…" : "Сгенерировать фон")
                </button>
                <button class="btn" @onclick="ClearBackground">Удалить фон</button>
                @if (!string.IsNullOrEmpty(BgError))
                {
                    <div class="error">@BgError</div>
                }
            </div>
        </div>

        <!-- Холст визитки -->
        <div class="canvas-container">
            <div id="visitCard" class="visit-card" style="@CardStyle">
                @foreach (var el in Elements)
                {
                    if (el is TextElement txt)
                    {
                        <div class="draggable @(SelectedElement==txt ? "selected":"")"
                             @onclick:stopPropagation="true" @onclick="() => SelectElement(txt)"
                             style="@($"position:absolute; left:{txt.X}px; top:{txt.Y}px; color:{txt.Color}; font-size:{txt.FontSize}px; font-family:{txt.FontFamily}; cursor:move;")"
                             @onpointerdown="e => StartDrag(el, e)"
                             @onpointermove="e => OnDrag(el, e)"
                             @onpointerup="e => EndDrag(el, e)">
                            @txt.Text
                        </div>
                    }
                    else if (el is ImageElement img)
                    {
                        <img src="@img.DataUrl"
                             class="draggable @(SelectedElement==img ? "selected":"")"
                             @onclick:stopPropagation="true" @onclick="() => SelectElement(img)"
                             style="@($"position:absolute; left:{img.X}px; top:{img.Y}px; width:{img.Width}px; height:{img.Height}px; cursor:move;")"
                             @onpointerdown="e => StartDrag(el, e)"
                             @onpointermove="e => OnDrag(el, e)"
                             @onpointerup="e => EndDrag(el, e)" />
                    }
                }
            </div>
            <button class="btn save-btn" @onclick="DownloadVisitCard">Скачать визитку</button>
        </div>
    </div>







@code {
    

    private void HandleChange(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int value))
        {
            if (value == 1)
            {
                Nav.NavigateTo("/businesscard");
            }
            else
            {
                Nav.NavigateTo("/BisnesShablon");
            }
        }
    }


    //создание сврей визитки

  const string ApiKey = "a60bf922-3a8a-4664-97a7-b6ff0aa5a1d5";

  // Преобразование внешнего URL в Data-URI
  private async Task<string> ToDataUrlAsync(string url)
  {
    var bytes = await Http.GetByteArrayAsync(url);
    var mime = url.EndsWith(".png") ? "image/png" : "image/jpeg";
    return $"data:{mime};base64,{Convert.ToBase64String(bytes)}";
  }

  // Генерация изображения
  private async Task<string?> GenerateImageAsync(string prompt)
  {
    try
    {
      var payload = new { token = ApiKey, prompt, width = 1024, height = 512, response_type = "url", stream = false };
      var resp = await Http.PostAsJsonAsync("https://neuroimg.art/api/v1/free-generate", payload);
      var api = await resp.Content.ReadFromJsonAsync<ApiResponse>();
      if (api?.status == "SUCCESS" && !string.IsNullOrEmpty(api.image_url))
        return api.image_url;
    }
    catch { }
    return null;
  }

  List<ElementBase> Elements = new();
  ElementBase? SelectedElement;

  // --- Текст ---
  string NewText = "";
  void AddText()
  {
    var t = new TextElement { Text = NewText, X = 20, Y = 20 };
    Elements.Add(t);
    SelectedElement = t;
  }
  void SelectElement(ElementBase el) => SelectedElement = el;

  // --- Изображение ---
  string SelectedImageType = "upload", ImagePrompt = "";
  bool IsImageLoading; string? ImageError;

  async Task GenerateElementImage()
  {
    ImageError = null; IsImageLoading = true;
    var url = await GenerateImageAsync(ImagePrompt);
    if (url != null)
    {
      var dataUrl = await ToDataUrlAsync(url);
      var img = new ImageElement { DataUrl = dataUrl, Width = 200, Height = 100, X = 20, Y = 20 };
      Elements.Add(img);
      SelectedElement = img;
    }
    else
    {
      ImageError = "Ошибка генерации картинки.";
    }
    IsImageLoading = false;
  }

  async Task UploadImage(InputFileChangeEventArgs e)
  {
    var f = e.File;
    using var ms = new MemoryStream();
    await f.OpenReadStream().CopyToAsync(ms);
    var b64 = Convert.ToBase64String(ms.ToArray());
    var img = new ImageElement { DataUrl = $"data:{f.ContentType};base64,{b64}", Width = 100, Height = 100, X = 20, Y = 20 };
    Elements.Add(img);
    SelectedElement = img;
  }

  // --- Фон ---
  string BackgroundPrompt = "", BackgroundUrl = "";
  bool IsBgLoading; string? BgError;

  async Task GenerateBackground()
  {
    BgError = null; IsBgLoading = true;
    var url = await GenerateImageAsync(BackgroundPrompt);
    if (url != null)
    {
      BackgroundUrl = await ToDataUrlAsync(url);
    }
    else
    {
      BgError = "Ошибка генерации фона.";
    }
    IsBgLoading = false;
  }

  async Task UploadBackground(InputFileChangeEventArgs e)
  {
    var f = e.File;
    using var ms = new MemoryStream();
    await f.OpenReadStream().CopyToAsync(ms);
    BackgroundUrl = $"data:{f.ContentType};base64,{Convert.ToBase64String(ms.ToArray())}";
  }

  void ClearBackground() => BackgroundUrl = "";

  string CardStyle => string.IsNullOrEmpty(BackgroundUrl)
    ? "background:none;"
    : $"background-image:url('{BackgroundUrl}');";

  // --- Drag&Drop ---
  bool isDragging; ElementBase? dragEl; double startX, startY, ptrX, ptrY;

  void StartDrag(ElementBase el, PointerEventArgs e)
  {
    isDragging = true; dragEl = el;
    ptrX = e.ClientX; ptrY = e.ClientY;
    startX = el.X; startY = el.Y;
  }

  void OnDrag(ElementBase el, PointerEventArgs e)
  {
    if (isDragging && dragEl == el)
    {
      el.X = startX + (e.ClientX - ptrX);
      el.Y = startY + (e.ClientY - ptrY);
    }
  }

  void EndDrag(ElementBase el, PointerEventArgs e)
  {
    isDragging = false; dragEl = null;
  }

  // --- Удаление ---
  void RemoveElement(ElementBase el)
  {
    Elements.Remove(el);
    if (SelectedElement == el)
      SelectedElement = null;
  }

  // --- Скачивание визитки в PNG ---
  async Task DownloadVisitCard()
  {
    await JS.InvokeVoidAsync("downloadVisitCard", "#visitCard", "business-card.png");
  }

  private class ApiResponse
  {
    public string status { get; set; }
    public string image_url { get; set; }
  }
}